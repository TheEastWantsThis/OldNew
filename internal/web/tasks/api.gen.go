// Package tasks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tasks

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Task defines model for Task.
type Task struct {
	Id             *uint   `json:"id,omitempty"`
	Task           *string `json:"task,omitempty"`
	Accomplishment *bool   `json:"Accomplishment,omitempty"`
}

// PostTaskJSONRequestBody defines body for PostTask for application/json ContentType.
type PostTaskJSONRequestBody = Task

// DeleteTaskIdJSONRequestBody defines body for DeleteTaskId for application/json ContentType.
type DeleteTaskIdJSONRequestBody = Task

// PatchTaskIdJSONRequestBody defines body for PatchTaskId for application/json ContentType.
type PatchTaskIdJSONRequestBody = Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /task)
	GetTask(ctx echo.Context) error
	// Create a new task
	// (POST /task)
	PostTask(ctx echo.Context) error
	// delete task
	// (DELETE /task/{id})
	DeleteTaskId(ctx echo.Context, id int) error
	// Patch task
	// (PATCH /task/{id})
	PatchTaskId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx)
	return err
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// DeleteTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskId(ctx, id)
	return err
}

// PatchTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/task", wrapper.GetTask)
	router.POST(baseURL+"/task", wrapper.PostTask)
	router.DELETE(baseURL+"/task/:id", wrapper.DeleteTaskId)
	router.PATCH(baseURL+"/task/:id", wrapper.PatchTaskId)

}

type GetTaskRequestObject struct {
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(w http.ResponseWriter) error
}

type GetTask200JSONResponse []Task

func (response GetTask200JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTaskRequestObject struct {
	Body *PostTaskJSONRequestBody
}

type PostTaskResponseObject interface {
	VisitPostTaskResponse(w http.ResponseWriter) error
}

type PostTask201JSONResponse Task

func (response PostTask201JSONResponse) VisitPostTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskIdRequestObject struct {
	Id   int `json:"id"`
	Body *DeleteTaskIdJSONRequestBody
}

type DeleteTaskIdResponseObject interface {
	VisitDeleteTaskIdResponse(w http.ResponseWriter) error
}

type DeleteTaskId204JSONResponse Task

func (response DeleteTaskId204JSONResponse) VisitDeleteTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type PatchTaskIdRequestObject struct {
	Id   int `json:"id"`
	Body *PatchTaskIdJSONRequestBody
}

type PatchTaskIdResponseObject interface {
	VisitPatchTaskIdResponse(w http.ResponseWriter) error
}

type PatchTaskId201JSONResponse Task

func (response PatchTaskId201JSONResponse) VisitPatchTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all tasks
	// (GET /task)
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)
	// Create a new task
	// (POST /task)
	PostTask(ctx context.Context, request PostTaskRequestObject) (PostTaskResponseObject, error)
	// delete task
	// (DELETE /task/{id})
	DeleteTaskId(ctx context.Context, request DeleteTaskIdRequestObject) (DeleteTaskIdResponseObject, error)
	// Patch task
	// (PATCH /task/{id})
	PatchTaskId(ctx context.Context, request PatchTaskIdRequestObject) (PatchTaskIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(ctx echo.Context) error {
	var request GetTaskRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx.Request().Context(), request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		return validResponse.VisitGetTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTask operation middleware
func (sh *strictHandler) PostTask(ctx echo.Context) error {
	var request PostTaskRequestObject

	var body PostTaskJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTask(ctx.Request().Context(), request.(PostTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTaskResponseObject); ok {
		return validResponse.VisitPostTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTaskId operation middleware
func (sh *strictHandler) DeleteTaskId(ctx echo.Context, id int) error {
	var request DeleteTaskIdRequestObject

	request.Id = id

	var body DeleteTaskIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTaskId(ctx.Request().Context(), request.(DeleteTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTaskIdResponseObject); ok {
		return validResponse.VisitDeleteTaskIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTaskId operation middleware
func (sh *strictHandler) PatchTaskId(ctx echo.Context, id int) error {
	var request PatchTaskIdRequestObject

	request.Id = id

	var body PatchTaskIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTaskId(ctx.Request().Context(), request.(PatchTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTaskIdResponseObject); ok {
		return validResponse.VisitPatchTaskIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
